'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4952
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_OrdenPago"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_OrdenPago
    Inherits Global.System.Data.DataSet
    
    Private tableDtOrdenPago As DtOrdenPagoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DtOrdenPago")) Is Nothing) Then
                MyBase.Tables.Add(New DtOrdenPagoDataTable(ds.Tables("DtOrdenPago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DtOrdenPago() As DtOrdenPagoDataTable
        Get
            Return Me.tableDtOrdenPago
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_OrdenPago = CType(MyBase.Clone,Ds_OrdenPago)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DtOrdenPago")) Is Nothing) Then
                MyBase.Tables.Add(New DtOrdenPagoDataTable(ds.Tables("DtOrdenPago")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDtOrdenPago = CType(MyBase.Tables("DtOrdenPago"),DtOrdenPagoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDtOrdenPago) Is Nothing) Then
                Me.tableDtOrdenPago.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_OrdenPago"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_OrdenPago.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDtOrdenPago = New DtOrdenPagoDataTable
        MyBase.Tables.Add(Me.tableDtOrdenPago)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDtOrdenPago() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_OrdenPago = New Ds_OrdenPago
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DtOrdenPagoRowChangeEventHandler(ByVal sender As Object, ByVal e As DtOrdenPagoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DtOrdenPagoDataTable
        Inherits Global.System.Data.TypedTableBase(Of DtOrdenPagoRow)
        
        Private columncodorden As Global.System.Data.DataColumn
        
        Private columnfechaact As Global.System.Data.DataColumn
        
        Private columnfechaemision As Global.System.Data.DataColumn
        
        Private columntasainteres As Global.System.Data.DataColumn
        
        Private columndias As Global.System.Data.DataColumn
        
        Private columnannio As Global.System.Data.DataColumn
        
        Private columnbaseimponible As Global.System.Data.DataColumn
        
        Private columntramo As Global.System.Data.DataColumn
        
        Private columnalicuota As Global.System.Data.DataColumn
        
        Private columninsolutos As Global.System.Data.DataColumn
        
        Private columnimpuestoAnual As Global.System.Data.DataColumn
        
        Private columntrimestres As Global.System.Data.DataColumn
        
        Private columninsoluto As Global.System.Data.DataColumn
        
        Private columnreajuste As Global.System.Data.DataColumn
        
        Private columninteres As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnValorUit As Global.System.Data.DataColumn
        
        Private columnReajusted As Global.System.Data.DataColumn
        
        Private columnTIM As Global.System.Data.DataColumn
        
        Private columncoddj As Global.System.Data.DataColumn
        
        Private columnfechadj As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DtOrdenPago"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codordenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodorden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tasainteresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntasainteres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property annioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnannio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property baseimponibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbaseimponible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tramoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntramo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alicuotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalicuota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property insolutosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninsolutos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property impuestoAnualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimpuestoAnual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trimestresColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrimestres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property insolutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninsoluto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property reajusteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreajuste
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property interesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninteres
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorUitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValorUit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReajustedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReajusted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property coddjColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncoddj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechadjColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechadj
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DtOrdenPagoRow
            Get
                Return CType(Me.Rows(index),DtOrdenPagoRow)
            End Get
        End Property
        
        Public Event DtOrdenPagoRowChanging As DtOrdenPagoRowChangeEventHandler
        
        Public Event DtOrdenPagoRowChanged As DtOrdenPagoRowChangeEventHandler
        
        Public Event DtOrdenPagoRowDeleting As DtOrdenPagoRowChangeEventHandler
        
        Public Event DtOrdenPagoRowDeleted As DtOrdenPagoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDtOrdenPagoRow(ByVal row As DtOrdenPagoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDtOrdenPagoRow( _
                    ByVal codorden As String,  _
                    ByVal fechaact As String,  _
                    ByVal fechaemision As String,  _
                    ByVal tasainteres As String,  _
                    ByVal dias As Short,  _
                    ByVal annio As String,  _
                    ByVal baseimponible As Decimal,  _
                    ByVal tramo As String,  _
                    ByVal alicuota As String,  _
                    ByVal insolutos As String,  _
                    ByVal impuestoAnual As Decimal,  _
                    ByVal trimestres As String,  _
                    ByVal insoluto As Decimal,  _
                    ByVal reajuste As Decimal,  _
                    ByVal interes As Decimal,  _
                    ByVal total As Decimal,  _
                    ByVal ValorUit As String,  _
                    ByVal Reajusted As String,  _
                    ByVal TIM As String,  _
                    ByVal coddj As String,  _
                    ByVal fechadj As String) As DtOrdenPagoRow
            Dim rowDtOrdenPagoRow As DtOrdenPagoRow = CType(Me.NewRow,DtOrdenPagoRow)
            Dim columnValuesArray() As Object = New Object() {codorden, fechaact, fechaemision, tasainteres, dias, annio, baseimponible, tramo, alicuota, insolutos, impuestoAnual, trimestres, insoluto, reajuste, interes, total, ValorUit, Reajusted, TIM, coddj, fechadj}
            rowDtOrdenPagoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDtOrdenPagoRow)
            Return rowDtOrdenPagoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DtOrdenPagoDataTable = CType(MyBase.Clone,DtOrdenPagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DtOrdenPagoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodorden = MyBase.Columns("codorden")
            Me.columnfechaact = MyBase.Columns("fechaact")
            Me.columnfechaemision = MyBase.Columns("fechaemision")
            Me.columntasainteres = MyBase.Columns("tasainteres")
            Me.columndias = MyBase.Columns("dias")
            Me.columnannio = MyBase.Columns("annio")
            Me.columnbaseimponible = MyBase.Columns("baseimponible")
            Me.columntramo = MyBase.Columns("tramo")
            Me.columnalicuota = MyBase.Columns("alicuota")
            Me.columninsolutos = MyBase.Columns("insolutos")
            Me.columnimpuestoAnual = MyBase.Columns("impuestoAnual")
            Me.columntrimestres = MyBase.Columns("trimestres")
            Me.columninsoluto = MyBase.Columns("insoluto")
            Me.columnreajuste = MyBase.Columns("reajuste")
            Me.columninteres = MyBase.Columns("interes")
            Me.columntotal = MyBase.Columns("total")
            Me.columnValorUit = MyBase.Columns("ValorUit")
            Me.columnReajusted = MyBase.Columns("Reajusted")
            Me.columnTIM = MyBase.Columns("TIM")
            Me.columncoddj = MyBase.Columns("coddj")
            Me.columnfechadj = MyBase.Columns("fechadj")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodorden = New Global.System.Data.DataColumn("codorden", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodorden)
            Me.columnfechaact = New Global.System.Data.DataColumn("fechaact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaact)
            Me.columnfechaemision = New Global.System.Data.DataColumn("fechaemision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaemision)
            Me.columntasainteres = New Global.System.Data.DataColumn("tasainteres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntasainteres)
            Me.columndias = New Global.System.Data.DataColumn("dias", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndias)
            Me.columnannio = New Global.System.Data.DataColumn("annio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnannio)
            Me.columnbaseimponible = New Global.System.Data.DataColumn("baseimponible", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbaseimponible)
            Me.columntramo = New Global.System.Data.DataColumn("tramo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntramo)
            Me.columnalicuota = New Global.System.Data.DataColumn("alicuota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalicuota)
            Me.columninsolutos = New Global.System.Data.DataColumn("insolutos", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninsolutos)
            Me.columnimpuestoAnual = New Global.System.Data.DataColumn("impuestoAnual", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimpuestoAnual)
            Me.columntrimestres = New Global.System.Data.DataColumn("trimestres", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrimestres)
            Me.columninsoluto = New Global.System.Data.DataColumn("insoluto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninsoluto)
            Me.columnreajuste = New Global.System.Data.DataColumn("reajuste", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreajuste)
            Me.columninteres = New Global.System.Data.DataColumn("interes", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninteres)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnValorUit = New Global.System.Data.DataColumn("ValorUit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValorUit)
            Me.columnReajusted = New Global.System.Data.DataColumn("Reajusted", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReajusted)
            Me.columnTIM = New Global.System.Data.DataColumn("TIM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIM)
            Me.columncoddj = New Global.System.Data.DataColumn("coddj", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncoddj)
            Me.columnfechadj = New Global.System.Data.DataColumn("fechadj", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechadj)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDtOrdenPagoRow() As DtOrdenPagoRow
            Return CType(Me.NewRow,DtOrdenPagoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DtOrdenPagoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DtOrdenPagoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DtOrdenPagoRowChangedEvent) Is Nothing) Then
                RaiseEvent DtOrdenPagoRowChanged(Me, New DtOrdenPagoRowChangeEvent(CType(e.Row,DtOrdenPagoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DtOrdenPagoRowChangingEvent) Is Nothing) Then
                RaiseEvent DtOrdenPagoRowChanging(Me, New DtOrdenPagoRowChangeEvent(CType(e.Row,DtOrdenPagoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DtOrdenPagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DtOrdenPagoRowDeleted(Me, New DtOrdenPagoRowChangeEvent(CType(e.Row,DtOrdenPagoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DtOrdenPagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DtOrdenPagoRowDeleting(Me, New DtOrdenPagoRowChangeEvent(CType(e.Row,DtOrdenPagoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDtOrdenPagoRow(ByVal row As DtOrdenPagoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_OrdenPago = New Ds_OrdenPago
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DtOrdenPagoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DtOrdenPagoRow
        Inherits Global.System.Data.DataRow
        
        Private tableDtOrdenPago As DtOrdenPagoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDtOrdenPago = CType(Me.Table,DtOrdenPagoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codorden() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.codordenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codorden' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.codordenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaact() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.fechaactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaact' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.fechaactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaemision() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.fechaemisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaemision' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.fechaemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tasainteres() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.tasainteresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tasainteres' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.tasainteresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dias() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.diasColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'dias' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.diasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property annio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.annioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'annio' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.annioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property baseimponible() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.baseimponibleColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'baseimponible' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.baseimponibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tramo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.tramoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tramo' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.tramoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alicuota() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.alicuotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'alicuota' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.alicuotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property insolutos() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.insolutosColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'insolutos' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.insolutosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property impuestoAnual() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.impuestoAnualColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'impuestoAnual' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.impuestoAnualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trimestres() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.trimestresColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'trimestres' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.trimestresColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property insoluto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.insolutoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'insoluto' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.insolutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property reajuste() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.reajusteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'reajuste' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.reajusteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property interes() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.interesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'interes' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.interesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.totalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'total' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ValorUit() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.ValorUitColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ValorUit' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.ValorUitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reajusted() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.ReajustedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Reajusted' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.ReajustedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIM() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.TIMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIM' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.TIMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property coddj() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.coddjColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'coddj' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.coddjColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechadj() As String
            Get
                Try 
                    Return CType(Me(Me.tableDtOrdenPago.fechadjColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechadj' de la tabla 'DtOrdenPago' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDtOrdenPago.fechadjColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodordenNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.codordenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodordenNull()
            Me(Me.tableDtOrdenPago.codordenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaactNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.fechaactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaactNull()
            Me(Me.tableDtOrdenPago.fechaactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaemisionNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.fechaemisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaemisionNull()
            Me(Me.tableDtOrdenPago.fechaemisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstasainteresNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.tasainteresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettasainteresNull()
            Me(Me.tableDtOrdenPago.tasainteresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiasNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.diasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiasNull()
            Me(Me.tableDtOrdenPago.diasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsannioNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.annioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetannioNull()
            Me(Me.tableDtOrdenPago.annioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsbaseimponibleNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.baseimponibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetbaseimponibleNull()
            Me(Me.tableDtOrdenPago.baseimponibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstramoNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.tramoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettramoNull()
            Me(Me.tableDtOrdenPago.tramoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalicuotaNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.alicuotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalicuotaNull()
            Me(Me.tableDtOrdenPago.alicuotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinsolutosNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.insolutosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinsolutosNull()
            Me(Me.tableDtOrdenPago.insolutosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimpuestoAnualNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.impuestoAnualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimpuestoAnualNull()
            Me(Me.tableDtOrdenPago.impuestoAnualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstrimestresNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.trimestresColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettrimestresNull()
            Me(Me.tableDtOrdenPago.trimestresColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinsolutoNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.insolutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinsolutoNull()
            Me(Me.tableDtOrdenPago.insolutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsreajusteNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.reajusteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetreajusteNull()
            Me(Me.tableDtOrdenPago.reajusteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsinteresNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.interesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetinteresNull()
            Me(Me.tableDtOrdenPago.interesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tableDtOrdenPago.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorUitNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.ValorUitColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorUitNull()
            Me(Me.tableDtOrdenPago.ValorUitColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReajustedNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.ReajustedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReajustedNull()
            Me(Me.tableDtOrdenPago.ReajustedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIMNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.TIMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIMNull()
            Me(Me.tableDtOrdenPago.TIMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscoddjNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.coddjColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcoddjNull()
            Me(Me.tableDtOrdenPago.coddjColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechadjNull() As Boolean
            Return Me.IsNull(Me.tableDtOrdenPago.fechadjColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechadjNull()
            Me(Me.tableDtOrdenPago.fechadjColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DtOrdenPagoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DtOrdenPagoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DtOrdenPagoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DtOrdenPagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
