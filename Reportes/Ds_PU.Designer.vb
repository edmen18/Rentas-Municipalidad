'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4952
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_PU"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_PU
    Inherits Global.System.Data.DataSet
    
    Private tableDT_PU As DT_PUDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DT_PU")) Is Nothing) Then
                MyBase.Tables.Add(New DT_PUDataTable(ds.Tables("DT_PU")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DT_PU() As DT_PUDataTable
        Get
            Return Me.tableDT_PU
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_PU = CType(MyBase.Clone,Ds_PU)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DT_PU")) Is Nothing) Then
                MyBase.Tables.Add(New DT_PUDataTable(ds.Tables("DT_PU")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDT_PU = CType(MyBase.Tables("DT_PU"),DT_PUDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDT_PU) Is Nothing) Then
                Me.tableDT_PU.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_PU"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_PU.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDT_PU = New DT_PUDataTable
        MyBase.Tables.Add(Me.tableDT_PU)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDT_PU() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_PU = New Ds_PU
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DT_PURowChangeEventHandler(ByVal sender As Object, ByVal e As DT_PURowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DT_PUDataTable
        Inherits Global.System.Data.TypedTableBase(Of DT_PURow)
        
        Private columnCODCLI As Global.System.Data.DataColumn
        
        Private columnDNIRUC As Global.System.Data.DataColumn
        
        Private columnDESCLI As Global.System.Data.DataColumn
        
        Private columnDIRECCION As Global.System.Data.DataColumn
        
        Private columnBASEIMPONIBLE As Global.System.Data.DataColumn
        
        Private columnCODPREDIO As Global.System.Data.DataColumn
        
        Private columnANTIGUEDAD As Global.System.Data.DataColumn
        
        Private columnCODMATERIAL As Global.System.Data.DataColumn
        
        Private columnCATEGORIAS As Global.System.Data.DataColumn
        
        Private columnVUNIT As Global.System.Data.DataColumn
        
        Private columnDPR As Global.System.Data.DataColumn
        
        Private columnMONTOD As Global.System.Data.DataColumn
        
        Private columnVUD As Global.System.Data.DataColumn
        
        Private columnAREACONSTRUIDA As Global.System.Data.DataColumn
        
        Private columnVALORCONSTRUCCION As Global.System.Data.DataColumn
        
        Private columnVALORTOTALCONSTRUCCION As Global.System.Data.DataColumn
        
        Private columnMONTOARANCEL As Global.System.Data.DataColumn
        
        Private columnVALORARANCEL As Global.System.Data.DataColumn
        
        Private columnAREATOTAL As Global.System.Data.DataColumn
        
        Private columnANNIO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DT_PU"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DNIRUCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDNIRUC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCLIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCLI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIRECCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIRECCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BASEIMPONIBLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBASEIMPONIBLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODPREDIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODPREDIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANTIGUEDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANTIGUEDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CODMATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCODMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CATEGORIASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCATEGORIAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VUNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DPRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDPR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VUDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVUD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREACONSTRUIDAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREACONSTRUIDA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALORCONSTRUCCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALORCONSTRUCCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALORTOTALCONSTRUCCIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALORTOTALCONSTRUCCION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONTOARANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONTOARANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VALORARANCELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVALORARANCEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREATOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREATOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANNIOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANNIO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DT_PURow
            Get
                Return CType(Me.Rows(index),DT_PURow)
            End Get
        End Property
        
        Public Event DT_PURowChanging As DT_PURowChangeEventHandler
        
        Public Event DT_PURowChanged As DT_PURowChangeEventHandler
        
        Public Event DT_PURowDeleting As DT_PURowChangeEventHandler
        
        Public Event DT_PURowDeleted As DT_PURowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDT_PURow(ByVal row As DT_PURow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDT_PURow( _
                    ByVal CODCLI As String,  _
                    ByVal DNIRUC As String,  _
                    ByVal DESCLI As String,  _
                    ByVal DIRECCION As String,  _
                    ByVal BASEIMPONIBLE As Double,  _
                    ByVal CODPREDIO As String,  _
                    ByVal ANTIGUEDAD As String,  _
                    ByVal CODMATERIAL As String,  _
                    ByVal CATEGORIAS As String,  _
                    ByVal VUNIT As Double,  _
                    ByVal DPR As Double,  _
                    ByVal MONTOD As Double,  _
                    ByVal VUD As Double,  _
                    ByVal AREACONSTRUIDA As Double,  _
                    ByVal VALORCONSTRUCCION As Double,  _
                    ByVal VALORTOTALCONSTRUCCION As Double,  _
                    ByVal MONTOARANCEL As Double,  _
                    ByVal VALORARANCEL As Double,  _
                    ByVal AREATOTAL As Double,  _
                    ByVal ANNIO As String) As DT_PURow
            Dim rowDT_PURow As DT_PURow = CType(Me.NewRow,DT_PURow)
            Dim columnValuesArray() As Object = New Object() {CODCLI, DNIRUC, DESCLI, DIRECCION, BASEIMPONIBLE, CODPREDIO, ANTIGUEDAD, CODMATERIAL, CATEGORIAS, VUNIT, DPR, MONTOD, VUD, AREACONSTRUIDA, VALORCONSTRUCCION, VALORTOTALCONSTRUCCION, MONTOARANCEL, VALORARANCEL, AREATOTAL, ANNIO}
            rowDT_PURow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDT_PURow)
            Return rowDT_PURow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DT_PUDataTable = CType(MyBase.Clone,DT_PUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DT_PUDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCODCLI = MyBase.Columns("CODCLI")
            Me.columnDNIRUC = MyBase.Columns("DNIRUC")
            Me.columnDESCLI = MyBase.Columns("DESCLI")
            Me.columnDIRECCION = MyBase.Columns("DIRECCION")
            Me.columnBASEIMPONIBLE = MyBase.Columns("BASEIMPONIBLE")
            Me.columnCODPREDIO = MyBase.Columns("CODPREDIO")
            Me.columnANTIGUEDAD = MyBase.Columns("ANTIGUEDAD")
            Me.columnCODMATERIAL = MyBase.Columns("CODMATERIAL")
            Me.columnCATEGORIAS = MyBase.Columns("CATEGORIAS")
            Me.columnVUNIT = MyBase.Columns("VUNIT")
            Me.columnDPR = MyBase.Columns("DPR")
            Me.columnMONTOD = MyBase.Columns("MONTOD")
            Me.columnVUD = MyBase.Columns("VUD")
            Me.columnAREACONSTRUIDA = MyBase.Columns("AREACONSTRUIDA")
            Me.columnVALORCONSTRUCCION = MyBase.Columns("VALORCONSTRUCCION")
            Me.columnVALORTOTALCONSTRUCCION = MyBase.Columns("VALORTOTALCONSTRUCCION")
            Me.columnMONTOARANCEL = MyBase.Columns("MONTOARANCEL")
            Me.columnVALORARANCEL = MyBase.Columns("VALORARANCEL")
            Me.columnAREATOTAL = MyBase.Columns("AREATOTAL")
            Me.columnANNIO = MyBase.Columns("ANNIO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCODCLI = New Global.System.Data.DataColumn("CODCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODCLI)
            Me.columnDNIRUC = New Global.System.Data.DataColumn("DNIRUC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDNIRUC)
            Me.columnDESCLI = New Global.System.Data.DataColumn("DESCLI", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCLI)
            Me.columnDIRECCION = New Global.System.Data.DataColumn("DIRECCION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIRECCION)
            Me.columnBASEIMPONIBLE = New Global.System.Data.DataColumn("BASEIMPONIBLE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBASEIMPONIBLE)
            Me.columnCODPREDIO = New Global.System.Data.DataColumn("CODPREDIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODPREDIO)
            Me.columnANTIGUEDAD = New Global.System.Data.DataColumn("ANTIGUEDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANTIGUEDAD)
            Me.columnCODMATERIAL = New Global.System.Data.DataColumn("CODMATERIAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCODMATERIAL)
            Me.columnCATEGORIAS = New Global.System.Data.DataColumn("CATEGORIAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCATEGORIAS)
            Me.columnVUNIT = New Global.System.Data.DataColumn("VUNIT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVUNIT)
            Me.columnDPR = New Global.System.Data.DataColumn("DPR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDPR)
            Me.columnMONTOD = New Global.System.Data.DataColumn("MONTOD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTOD)
            Me.columnVUD = New Global.System.Data.DataColumn("VUD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVUD)
            Me.columnAREACONSTRUIDA = New Global.System.Data.DataColumn("AREACONSTRUIDA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREACONSTRUIDA)
            Me.columnVALORCONSTRUCCION = New Global.System.Data.DataColumn("VALORCONSTRUCCION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALORCONSTRUCCION)
            Me.columnVALORTOTALCONSTRUCCION = New Global.System.Data.DataColumn("VALORTOTALCONSTRUCCION", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALORTOTALCONSTRUCCION)
            Me.columnMONTOARANCEL = New Global.System.Data.DataColumn("MONTOARANCEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONTOARANCEL)
            Me.columnVALORARANCEL = New Global.System.Data.DataColumn("VALORARANCEL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVALORARANCEL)
            Me.columnAREATOTAL = New Global.System.Data.DataColumn("AREATOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREATOTAL)
            Me.columnANNIO = New Global.System.Data.DataColumn("ANNIO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANNIO)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDT_PURow() As DT_PURow
            Return CType(Me.NewRow,DT_PURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DT_PURow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DT_PURow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DT_PURowChangedEvent) Is Nothing) Then
                RaiseEvent DT_PURowChanged(Me, New DT_PURowChangeEvent(CType(e.Row,DT_PURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DT_PURowChangingEvent) Is Nothing) Then
                RaiseEvent DT_PURowChanging(Me, New DT_PURowChangeEvent(CType(e.Row,DT_PURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DT_PURowDeletedEvent) Is Nothing) Then
                RaiseEvent DT_PURowDeleted(Me, New DT_PURowChangeEvent(CType(e.Row,DT_PURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DT_PURowDeletingEvent) Is Nothing) Then
                RaiseEvent DT_PURowDeleting(Me, New DT_PURowChangeEvent(CType(e.Row,DT_PURow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDT_PURow(ByVal row As DT_PURow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_PU = New Ds_PU
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DT_PUDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DT_PURow
        Inherits Global.System.Data.DataRow
        
        Private tableDT_PU As DT_PUDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDT_PU = CType(Me.Table,DT_PUDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.CODCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODCLI' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.CODCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DNIRUC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.DNIRUCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DNIRUC' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.DNIRUCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCLI() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.DESCLIColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCLI' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.DESCLIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIRECCION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.DIRECCIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DIRECCION' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.DIRECCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BASEIMPONIBLE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.BASEIMPONIBLEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BASEIMPONIBLE' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.BASEIMPONIBLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODPREDIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.CODPREDIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODPREDIO' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.CODPREDIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANTIGUEDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.ANTIGUEDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANTIGUEDAD' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.ANTIGUEDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CODMATERIAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.CODMATERIALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CODMATERIAL' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.CODMATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CATEGORIAS() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.CATEGORIASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CATEGORIAS' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.CATEGORIASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VUNIT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.VUNITColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VUNIT' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.VUNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DPR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.DPRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DPR' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.DPRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTOD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.MONTODColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONTOD' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.MONTODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VUD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.VUDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VUD' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.VUDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREACONSTRUIDA() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.AREACONSTRUIDAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AREACONSTRUIDA' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.AREACONSTRUIDAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALORCONSTRUCCION() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.VALORCONSTRUCCIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALORCONSTRUCCION' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.VALORCONSTRUCCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALORTOTALCONSTRUCCION() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.VALORTOTALCONSTRUCCIONColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALORTOTALCONSTRUCCION' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.VALORTOTALCONSTRUCCIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONTOARANCEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.MONTOARANCELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONTOARANCEL' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.MONTOARANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VALORARANCEL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.VALORARANCELColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VALORARANCEL' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.VALORARANCELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREATOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.AREATOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AREATOTAL' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.AREATOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANNIO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_PU.ANNIOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ANNIO' de la tabla 'DT_PU' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_PU.ANNIOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODCLINull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.CODCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODCLINull()
            Me(Me.tableDT_PU.CODCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDNIRUCNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.DNIRUCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDNIRUCNull()
            Me(Me.tableDT_PU.DNIRUCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCLINull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.DESCLIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCLINull()
            Me(Me.tableDT_PU.DESCLIColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIRECCIONNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.DIRECCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIRECCIONNull()
            Me(Me.tableDT_PU.DIRECCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBASEIMPONIBLENull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.BASEIMPONIBLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBASEIMPONIBLENull()
            Me(Me.tableDT_PU.BASEIMPONIBLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODPREDIONull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.CODPREDIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODPREDIONull()
            Me(Me.tableDT_PU.CODPREDIOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANTIGUEDADNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.ANTIGUEDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANTIGUEDADNull()
            Me(Me.tableDT_PU.ANTIGUEDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCODMATERIALNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.CODMATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCODMATERIALNull()
            Me(Me.tableDT_PU.CODMATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCATEGORIASNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.CATEGORIASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCATEGORIASNull()
            Me(Me.tableDT_PU.CATEGORIASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVUNITNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.VUNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVUNITNull()
            Me(Me.tableDT_PU.VUNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDPRNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.DPRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDPRNull()
            Me(Me.tableDT_PU.DPRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONTODNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.MONTODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONTODNull()
            Me(Me.tableDT_PU.MONTODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVUDNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.VUDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVUDNull()
            Me(Me.tableDT_PU.VUDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREACONSTRUIDANull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.AREACONSTRUIDAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREACONSTRUIDANull()
            Me(Me.tableDT_PU.AREACONSTRUIDAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALORCONSTRUCCIONNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.VALORCONSTRUCCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALORCONSTRUCCIONNull()
            Me(Me.tableDT_PU.VALORCONSTRUCCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALORTOTALCONSTRUCCIONNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.VALORTOTALCONSTRUCCIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALORTOTALCONSTRUCCIONNull()
            Me(Me.tableDT_PU.VALORTOTALCONSTRUCCIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONTOARANCELNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.MONTOARANCELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONTOARANCELNull()
            Me(Me.tableDT_PU.MONTOARANCELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVALORARANCELNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.VALORARANCELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVALORARANCELNull()
            Me(Me.tableDT_PU.VALORARANCELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREATOTALNull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.AREATOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREATOTALNull()
            Me(Me.tableDT_PU.AREATOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsANNIONull() As Boolean
            Return Me.IsNull(Me.tableDT_PU.ANNIOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetANNIONull()
            Me(Me.tableDT_PU.ANNIOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DT_PURowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DT_PURow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DT_PURow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DT_PURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
